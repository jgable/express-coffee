// Generated by CoffeeScript 1.4.0
var MongoStore, TwitterStrategy, Users, appSettings, authenticate, callbackUrl, config, express, init, mongoose, passport, registerRoutes, twitterOpts, users;

passport = require("passport");

TwitterStrategy = (require("passport-twitter")).Strategy;

mongoose = require("mongoose");

MongoStore = require("connect-mongodb");

express = require("express");

config = require("./config");

Users = require("./data/users");

appSettings = require("./connect-appSettings");

users = new Users;

callbackUrl = process.env.NODE_ENV === "production" ? config.twitter.callbackUrl.prod : config.twitter.callbackUrl.dev;

twitterOpts = {
  consumerKey: config.twitter.consumerKey,
  consumerSecret: config.twitter.consumerSecret,
  callbackURL: callbackUrl
};

authenticate = function() {
  return passport.authenticate;
};

init = function(app, sessionUrl) {
  var strat;
  if (sessionUrl == null) {
    sessionUrl = config.dbServer;
  }
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return users.findOne({
      id: id
    }, done);
  });
  strat = new TwitterStrategy(twitterOpts, function(token, tokenSecret, profile, done) {
    var displayName, id;
    id = profile.id, displayName = profile.displayName;
    return users.findOrCreate({
      id: id,
      displayName: displayName,
      token: token,
      tokenSecret: tokenSecret
    }, done);
  });
  passport.use(strat);
  app.use(express.cookieParser("cookie fart"));
  app.use(express.bodyParser());
  app.use(express.session({
    secret: "unicorn fart",
    maxAge: new Date(Date.now() + 3600000),
    store: new MongoStore({
      url: sessionUrl
    })
  }, function(err) {
    return console.log(err || "connect-mongodb setup ok");
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  return app.use(appSettings({
    data: function(req, resp) {
      var userData;
      if (!req.user) {
        return;
      }
      userData = {
        user: req.user
      };
      return userData;
    }
  }));
};

registerRoutes = function(app) {
  app.get('/auth/twitter', passport.authenticate('twitter'));
  app.get('/auth/twitter/callback', passport.authenticate('twitter', {
    successRedirect: '/shows',
    failureRedirect: '/'
  }));
  return app.get('/logout', function(req, res) {
    req.logOut();
    return res.redirect('/');
  });
};

module.exports = {
  init: init,
  authenticate: authenticate,
  registerRoutes: registerRoutes
};
